/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package wordladder;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.ArrayList;

/**
 *
 * @author Suthasoma
 */
public class InputGrow extends javax.swing.JPanel {

    private ArrayList<String> word;
    private ArrayList<InputEntry> inputs;
    private GridBagConstraints gbc;
    /**
     * Creates new form InputGrow
     */
    public InputGrow() {
        initComponents();
        gbc = new GridBagConstraints();
        gbc.insets = new Insets(0,2,0,2);
        gbc.gridy = 0;
        gbc.gridx = 0;
        word = new ArrayList<>();
        inputs = new ArrayList<>();
        inputs.add(new InputEntry(20));
        inputs.get(0).setLabelText("");
        inputs.get(0).setPreferredSize(new Dimension(20,20));
        this.add(inputs.get(0), gbc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>                        

    public void typing(char e) {
        int key = (int) e;

        if (key >= 97 && key <= 132) {
            InputEntry newInput = new InputEntry(20);
            newInput.setPreferredSize(new Dimension(20,20));
            inputs.add(newInput);

            gbc.gridx++;
            inputs.get(gbc.gridx-1).setLabelText(Character.toString((char) key).toUpperCase());
            inputs.get(gbc.gridx-1).setPreferredSize(new Dimension(22,26));
            inputs.get(gbc.gridx).setPreferredSize(new Dimension(20,20));
            word.add(Character.toString((char) key));
            
            this.add(inputs.get(gbc.gridx), gbc);
        } else if (key == 8) {
            if (word.size() <= 0) {
                return;
            }
            gbc.gridx--;
            this.remove(inputs.get(inputs.size()-1));
            inputs.get(gbc.gridx).setLabelText("");
            inputs.get(gbc.gridx).setPreferredSize(new Dimension(20,20));
            inputs.remove(inputs.size()-1);
            word.remove(word.size()-1);
        }
        
        this.revalidate();
        this.repaint();
    }
    
    public String getText() {
        String collector = "";
        for (String s : word) {
            collector += s;
        }
        return collector;
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}

